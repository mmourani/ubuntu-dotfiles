#########################################
# Utility Functions

function bot() {
  ESC_SEQ="\x1b["
  echo
  echo -e "$ESC_SEQ"32;01m\[._.]/$ESC_SEQ"39;49;00m - "$1
}

# Create a new git repo with one README commit and CD into it
function gitnr() { mkdir $1; cd $1; git init; touch README; git add README; git commit -mFirst-commit;}

# Do a Matrix movie effect of falling characters
function matrix1() {
echo -e "\e[1;40m" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;sleep 0.05; done|gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

function matrix2() {
echo -e "\e[1;40m" ; clear ; characters=$( jot -c 94 33 | tr -d '\n' ) ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;sleep 0.05; done|gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

# Use Mac OS Preview to open a man page in a more handsome format
function manp() {
  man -t $1 | open -f -a /Applications/Preview.app
}

# Show normally hidden system and dotfile types of files
# in Mac OS Finder
function showhiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles YES
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

# Hide (back to defaults) normally hidden system and dotfile types of files
# in Mac OS Finder
function hidehiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles NO
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

## hammer a service with curl for a given number of times
## usage: curlhammer $url
function curlhammer () {
  bot "about to hammer $1 with $2 curls â‡’";
  echo "curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'"
  for i in {1..$2}
  do
    curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'
  done
  bot "done"
}

## curlheader will return only a specific response header or all response headers for a given URL
## usage: curlheader $header $url
## usage: curlheader $url
function curlheader() {
  if [[ -z "$2" ]]; then
    echo "curl -k -s -D - $1 -o /dev/null"
    curl -k -s -D - $1 -o /dev/null:
  else
    echo "curl -k -s -D - $2 -o /dev/null | grep $1:"
    curl -k -s -D - $2 -o /dev/null | grep $1:
  fi
}

## get the timings for a curl to a URL
## usage: curltime $url
function curltime(){
  curl -w "   time_namelookup:  %{time_namelookup}\n\
      time_connect:  %{time_connect}\n\
   time_appconnect:  %{time_appconnect}\n\
  time_pretransfer:  %{time_pretransfer}\n\
     time_redirect:  %{time_redirect}\n\
time_starttransfer:  %{time_starttransfer}\n\
--------------------------\n\
        time_total:  %{time_total}\n" -o /dev/null -s "$1"
}

function fixperms(){
    find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Generate Subresource Integrity hashes.
# 1st argument is the filename.
# 2nd argument, optional, is the hash algorithm
# (currently the allowed prefixes are sha256, sha384, and sha512)
# See http://www.w3.org/TR/SRI/ and
# https://developer.mozilla.org/docs/Web/Security/Subresource_Integrity
function sri() {
  if [ -z "${1}" ]; then
    echo "ERROR: No file specified.";
    return 1;
  fi;
  local algorithm="${2:-sha512}"
  if ! echo "${algorithm}" | egrep -q "^sha(256|384|512)$"; then
    echo "ERROR: hash algorithm must be sha256, sha384 or sha512.";
    return 1;
  fi;
  local filehash=$(openssl dgst "-${algorithm}" -binary "$1" | openssl base64 -A)
  if [ -z "${filehash}" ]; then
    return 1;
  fi;
  echo "${algorithm}-${filehash}";
}

## output directory/file tree, excluding ignorables
function tre(){
  tree -aC -I '.git|node_modules|bower_components|.DS_Store' --dirsfirst "$@"
}

## weather seattle
function weather() {
  curl wttr.in/$1
}

#########################################
# hyperledger functions 


# Clone the repo
function clone {
  initvars
  if [ -d $LFID ]; then
     echo "LFID environment variable must be set to your Linux Foundation ID"
     return 1
  fi
  if [ -d $REPO_DIR ]; then
     echo "repo already exists at $REPO_DIR"
     return 1
  fi
  if [ ! -d $PROJECT_DIR ]; then
     mkdir -p $PROJECT_DIR
  fi
  cd $PROJECT_DIR
  echo ">>> Cloning directory at $REPO_DIR ..."
  git clone ssh://${LFID}@${GERRIT_ADDR}/${REPO}
  cdr
  git config --global gitreview.username $LFID
  git config --global gitreview.remote origin
  gitdir=$(git rev-parse --git-dir)
  scp -p -P 29418 ${LFID}@${GERRIT}:hooks/commit-msg ${gitdir}/hooks/  > /dev/null
  echo ">>> Completed clone of directory at $REPO_DIR"
}

# Clone the repo to a new directory, typically for verification
function clonedir {
  OLD_GOPATH=$GOPATH
  if [ $# -ne 1 ]; then
     echo "Usage: clonedir <dir>"
     return 1
  fi
  if [ -d $1 ]; then
     echo "directory $1 already exists"
     return 1
  fi
  mkdir -p $1
  cd $1
  export GOPATH=`pwd`
  clone
  echo "WARNING: Your GOPATH was changed from ${OLD_GOPATH} to ${GOPATH}.  Be sure to change it back when done."
}

# Create a new branch
function branch {
  initvars
  if [ $# -ne 1 ]; then
     echo "Usage: branch <branch-name>"
     return 1
  fi
  cdr
  if [ $? -ne 0 ]; then
    return $?
  fi
  git checkout master
  if [ $? -ne 0 ]; then
    return $?
  fi
  git checkout -b $1
  return $?
}

# push changes to repo
function push {
 cdr
 if [ $? -ne 0 ]; then
   return 1
 fi
 echo "Running make before pushing ..."
 make unit-tests docs
 if [ $? -ne 0 ]; then
   echo "Not pushing because make failed"
   return 1
 fi
 git push origin HEAD:refs/for/master
}

# Rebase your current branch on the latest from master
function rebase {
   cdr
   CUR_BRANCH=`git rev-parse --abbrev-ref HEAD`
   if [ "${CUR_BRANCH}" = "master" ]; then
      echo "Can't rebase from master branch"
      return 1
   fi
   git checkout master
   if [ $? -ne 0 ]; then
      echo "Failed to checkout out master"
      return 1
   fi
   echo "Updating master ..."
   git pull
   if [ $? -ne 0 ]; then
      echo "Failed to pull from master"
      return 1
   fi
   git checkout $CUR_BRANCH
   if [ $? -ne 0 ]; then
      echo "Failed to switch back to branch $CUR_BRANCH"
      return 1
   fi
   git rebase master
   if [ $? -ne 0 ]; then
      echo "Failed to rebase branch $CUR_BRANCH against master"
      return 1
   fi
}

# setrepo
function setrepo {
  if [ $# -ne 1 ]; then
     echo "Usage: setrepo <repo>"
     echo "Examples:"
     echo "   setrepo fabric-ca"
     echo "   setrepo fabric"
     return 1
  fi
  export REPO=$1
  initvars
  if [ ! -d $REPO_DIR ]; then
     clone
  else
     cdr
  fi
}

function verify {
   rm -rf $HOME/verify
   clonedir $HOME/verify
}

# Change to the repo directory
function cdr {
  initvars
  if [ ! -d $REPO_DIR ]; then
     echo "repo does not exist at $REPO_DIR"
     return 1
  fi
  cd $REPO_DIR
  return 0
}

# Initialize variables appropriately
function initvars {
   export PROJECT_DIR=$GOPATH/src/$PROJECT
   export REPO_DIR=$PROJECT_DIR/$REPO
}

# Generate the coverage report
function gencov {
   cdr
   echo "Generating coverage report ..."
   go get github.com/axw/gocov/gocov
   go get -u gopkg.in/matm/v1/gocov-html
   gocov test `go list ./... | grep -Ev '/vendor/|/api|/dbutil|/ldap'` | gocov-html > /tmp/coverage.html
   echo "View the coverage report by pasting the following URL in your browser: file:///tmp/coverage.html"
}
